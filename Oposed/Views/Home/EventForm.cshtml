@using System.Web
@model EventViewModel
@{
    ViewData["Title"] = "Home Page";

    User user = new User();
    if (Context.Items.ContainsKey("User"))
    {
        user = Context.Items["User"] as User;
    }
}
<script>
    window.id = @Model.Event.Id;
        
    function save()
    {
        let id = window.id;
        let name = $("#name").val();
        let description = $("#description").val();
        let image = $("#imageBase64").val();
        let resourceId = parseInt($("#resourceId").val());
        let fromDOMs = $(".from");
        let toDOMs = $(".to");
        let isPublic = $("#isPublic").is(':checked')
        let enableJoinNotification = $("#enableJoinNotification").is(':checked')
        let maxVisitorCount = parseInt($("#maxVisitorCount").val());
        let tags = $("#tags").val();
        
        if(isNaN(maxVisitorCount)){
            maxVisitorCount = 0;
        }

        let data = {
            id: id,
            resourceId: resourceId,
            organizerId: @user.Id,
            isPrivate: !isPublic,
            enableJoinNotification: enableJoinNotification,
            name: name,
            description: description,
            maxVisitorCount: maxVisitorCount,
            image: image,
            tags: tags,
            schedule: []
        };

        let i = 0;
        for(i = 0; i < fromDOMs.length; i++){
            if(fromDOMs[i].value !== "" && toDOMs[i].value !== ""){
                data.schedule.push({
                    from: toIsoString(new Date(fromDOMs[i].value)),
                    to: toIsoString(new Date(toDOMs[i].value))
                });  
            }
        }

        if(!validateData(data)){
            notify({
	                type: "error",
	                title: "@Localizer["Error"]",
	                message: "<p>@Localizer["Some fields were not filled out correctly"]</p>",
	                position: {
	                    x: "right",
	                    y: "top"
	                },
	                autoHide: true,
	                delay: 4000
                });

            return;
        }

        let httpMethod = "PUT";
        let httpDataType = "";
        if(id <= 0){
            httpMethod = "POST";
            httpDataType = "json";
        }

        $("#form").loading('start');
        $.ajax({
            url:"/Proxy?Api=/Event",
            type:httpMethod,
            data:JSON.stringify(data),
            dataType:httpDataType,
            success: function(res){

                if(typeof res.id !== "undefined"){
                    window.id = res.id;
                }
        
                notify({
	                type: "success", //alert | success | error | warning | info
	                title: "@Localizer["Saved"]",
	                message: "<p>@Localizer["Changes saved"]</p>",
	                position: {
	                    x: "right",
	                    y: "top"
	                },
	                autoHide: true,
	                delay: 4000
                });

                if($("#enableSaveAsPrivateTemplate").is(':checked') || ($("#enableSaveAsPublicTemplate").length !== 0 && $("#enableSaveAsPublicTemplate").is(':checked'))){
                    saveTemplate(data);
                }
                else
                {
                    $("#form").loading('stop');
                }
            },
            error: function(e){
                $("#form").loading('stop');

                let errTxt = "@Localizer["API connection failed"]";
                if(e.responseJSON !== undefined && e.responseJSON.errorId === 12){
                    $('#smartwizard').smartWizard("goToStep", 3);
                    errTxt = "@Localizer["An event is already taking place in the specified period"]";
                }
                
                notify({
	                type: "error", //alert | success | error | warning | info
	                title: "@Localizer["Error"]",
	                message: "<p localize-content>"+errTxt+"</p>",
	                position: {
	                    x: "right",
	                    y: "top"
	                },
	                autoHide: true,
	                delay: 4000
                });
            }

        });
    }

    function saveTemplate(data){
        let templateData = {
            data: data,
            isPublic: $("#enableSaveAsPublicTemplate").length !== 0 && $("#enableSaveAsPublicTemplate").is(':checked')
        };

          $.ajax({
            url:"/Proxy?Api=/Template",
            type:'PUT',
            data:JSON.stringify(templateData),
            dataType:'',
            success: function(res){
                notify({
	                type: "success",
	                title: "@Localizer["Saved"]",
	                message: "<p>@Localizer["Template saved"]</p>",
	                position: {
	                    x: "right",
	                    y: "top"
	                },
	                autoHide: true,
	                delay: 4000
                });

                $("#form").loading('stop');
            },
            error: function(e){
                $("#form").loading('stop');

                let errTxt = "@Localizer["Template could not be saved"]";
                
                notify({
	                type: "error",
	                title: "@Localizer["Error"]",
	                message: "<p localize-content>"+errTxt+"</p>",
	                position: {
	                    x: "right",
	                    y: "top"
	                },
	                autoHide: true,
	                delay: 4000
                });
            }
        });
    }

    function validateData(data){
        if(data.name.length === 0){
            $('#smartwizard').smartWizard("goToStep", 1);
            return false;
        }

        if(data.resourceId === 0){
            $('#smartwizard').smartWizard("goToStep", 2);
            return false;
        }

        if(data.schedule.length === 0){
            $('#smartwizard').smartWizard("goToStep", 3);
            return false;
        }
        
        if(data.maxVisitorCount < 0){
            $('#smartwizard').smartWizard("goToStep", 4);
            return false;
        }

        return true;
    }

    function loadTemplate(templatId)
    {
        $("#form").loading('start');
        
        if(templatId === ''){
            $("#name").val("");
            $("#description").val("");
            $("#imageBase64").val("");
            $("#isPublic").attr("checked", "");
            $("#enableJoinNotification").attr("checked", "");
            $("#maxVisitorCount").val(0);
            $("#tags").trigger('tokenize:clear');
            $("#tags").trigger('tokenize:tokens:reorder');
            
            $("#form").loading('stop');
            return;
        }

        $.ajax({
            url:"/Proxy?Api=/Template/"+templatId,
            type:'GET',
            dataType:'json',
            success: function(res){
                let data = res.data;
                
                $("#name").val(data.name);
                $("#description").val(data.description).trigger('change');
                $("#imageView").attr("src",data.image);
                $("#imageBase64").val(data.image);
                if(data.isPrivate){
                    $("#isPublic").removeAttr("checked");
                }else{
                    $("#isPublic").attr("checked", "");
                }
                if(data.enableJoinNotification){
                    $("#enableJoinNotification").attr("checked", "");
                }else{
                    $("#enableJoinNotification").removeAttr("checked");
                }
                $("#maxVisitorCount").val(data.maxVisitorCount);
                data.tags.forEach(tag => $("#tags").trigger('tokenize:tokens:add', ['value', tag, true]));
                
                $('#smartwizard').smartWizard("stepState", [1,2,3,4,5], "done");
                $('#smartwizard').smartWizard("goToStep", 3);

                $("#nextButton").hide();
                $("#saveButton").show();

                $("#form").loading('stop');
            },
            error: function(e){
                $("#form").loading('stop');

                let errTxt = "@Localizer["Template could not be saved"]";
                
                notify({
	                type: "error",
	                title: "@Localizer["Error"]",
	                message: "<p localize-content>"+errTxt+"</p>",
	                position: {
	                    x: "right",
	                    y: "top"
	                },
	                autoHide: true,
	                delay: 4000
                });
            }
        });
    }

    function updateAvatar()
	{
		var fileReader = new FileReader();
		fileReader.onload = function () {
			var img = document.createElement("img");
			img.src = fileReader.result;
			
			setTimeout(function(){ 
				var canvas = document.createElement("CANVAS");
				canvas.width = img.width;
				canvas.height = img.height;
				var ctx = canvas.getContext("2d");
				ctx.drawImage(img, 0, 0, img.width, img.height);
				
                let ratio = img.width / img.height;
                let height = 366 / ratio

				var av = Canvas2Image.convertToPNG(canvas, 366, height);
				$("#imageView").attr("src",av.src);
				$("#imageBase64").val(av.src);
			}, 100);
			
		};
		fileReader.readAsDataURL($('#image').prop('files')[0]);
	}

    function addTimePeriod(from = '', to = ''){
        let timePeriods = $("#timePeriods");
        timePeriods.append('<div class="form-group row my-2"><div class="col-sm-5"> <input type="datetime-local" class="form-control from" value="'+from+'"></div><div class="col-sm-5"><input type="datetime-local" class="form-control to" value="'+to+'"></div><div class="col-sm-1"><button type="button" class="btn btn-danger" onclick="removeTimePeriod(this);">Remove</button></div></div>');
        
        $('#smartwizardContent').height($('#smartwizardContent').height() + 46);
    }

    function removeTimePeriod(btn){
        $(btn)
            .parent()
            .parent()
            .remove();

        $('#smartwizardContent').height($('#smartwizardContent').height() - 46);
    }
</script>
<div class="container px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5 align-items-center my-5">
        <form id="form">
            <div id="smartwizard">
                <ul class="nav">
                   <li>
                       <a class="nav-link" href="#step-1" localize-content>
                          Template
                       </a>
                   </li>
                   <li>
                       <a class="nav-link" href="#step-2" localize-content>
                          What
                       </a>
                   </li>
                   <li>
                       <a class="nav-link" href="#step-3" localize-content>
                          Where
                       </a>
                   </li>
                   <li>
                       <a class="nav-link" href="#step-4" localize-content>
                          When
                       </a>
                   </li>
                   <li>
                       <a class="nav-link" href="#step-5" localize-content>
                          Who
                       </a>
                   </li>
                </ul>
                <div class="tab-content" id="smartwizardContent">
                    <div id="step-1" class="tab-pane" role="tabpanel">
                        <div class="form-group my-2">
                            <label for="type" localize-content>Template</label>
                            <select id="type" class="form-control" onChange="loadTemplate(this.value);">
                                <option value="" localize-content>No</option>
                                @foreach(var template in Model.Templates){
                                    <option value="@template.Id">@template.Data.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div id="step-2" class="tab-pane" role="tabpanel">
                        <div class="form-group my-2">
                            <label for="name" localize-content>Name <font color="red">*</font></label>
                            <input type="text" class="form-control" id="name" value="@Model.Event.Name">
                        </div>
                        <div class="form-group my-2">
                            <label for="description" localize-content>Description</label>
                            <textarea class="form-control" id="description" rows="3">@Model.Event.Description</textarea>
                        </div>
                        <script>
                            $('#description').richText({
                                imageUpload: false,
	                            fileUpload: false,
                                videoEmbed: false,
                            });
                        </script>
                        <div class="form-group row my-2">
                            <div class="col-sm-10">
                                <label for="image" localize-content>Image</label>
                                <small class="form-text text-muted">(366×275px)</small>
                                <input type="file" class="form-control" id="image" accept="image/png, image/jpeg" onChange="updateAvatar()">
                                <input type="hidden" class="form-control" id="imageBase64" value="@Model.Event.Image">
                                <button type="button" class="btn btn-danger my-2" onclick='$("#imageView").attr("src","");	$("#imageBase64").val("");' localize-content>Remove image</button>
                            </div>
                            <img class="img-responsive col-sm-2" id="imageView" src="@Model.Event.Image" alt="" style="width:200px;"><br/>
                        </div>
                    </div>
                    <div id="step-3" class="tab-pane" role="tabpanel">
                        <div class="form-group my-2">
                            <label for="resourceId" localize-content>Room</label> <font color="red">*</font>
                            <select id="resourceId" class="form-control">
                                @foreach(var resource in Model.Resources){
                                    if (resource.Type == ResourceType.Room)
                                    {
                                        <option value="@resource.Id" selected="@(Model.Event.ResourceId == resource.Id)">@resource.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div id="step-4" class="tab-pane" role="tabpanel">
                        <div id="timePeriods">
                            <div class="form-group row my-2">
                                <div class="col-sm-5">
                                    <label for="" localize-content>From</label> <font color="red">*</font>
                                </div>
                                <div class="col-sm-5">
                                    <label for="" localize-content>To</label> <font color="red">*</font>
                                </div>
                            </div>
                            <div class="form-group row my-2">
                                <div class="col-sm-5">
                                    <input type="datetime-local" class="form-control from" value="@(Model.Event.Schedule?.Count >= 1 ? Model.Event.Schedule[0].From.ToString("s") : "")">
                                </div>
                                <div class="col-sm-5">
                                    <input type="datetime-local" class="form-control to" value="@(Model.Event.Schedule?.Count >= 1 ? Model.Event.Schedule[0].To.ToString("s") : "")">
                                </div>
                            </div>
                        </div>
                        <script>
                            @if (Model.Event.Schedule != null)
                            {
                                for (int i = 1; i < Model.Event.Schedule.Count; i++)
                                {
                                    var schedule = Model.Event.Schedule[i];
                                    @Html.Raw($"addTimePeriod('{schedule.From.ToString("s")}','{schedule.To.ToString("s")}');");
                                }
                            }
                        </script>
                        <button type="button" class="btn btn-success" onclick='addTimePeriod();' localize-content>Add period of time</button>
                    </div>
                    <div id="step-5" class="tab-pane" role="tabpanel">
                        <div class="form-group my-2 form-switch">
                            <input class="form-check-input" type="checkbox" id="isPublic" value="1" @(Model.Event.IsPrivate ? "" : "checked")>
                            <label class="form-check-label" for="isPublic" localize-content>Public </label>
                        </div>
                        <div class="form-group my-2 form-switch">
                            <input class="form-check-input" type="checkbox" id="enableJoinNotification" value="1" @(Model.Event.EnableJoinNotification ? "checked" : "")>
                            <label class="form-check-label" for="enableJoinNotification" localize-content>Enable Join-Notification</label>
                        </div>
                        <div class="form-group my-2">
                            <label for="maxVisitorCount" localize-content>Max. count of visitors</label> <font color="red">*</font>
                            <input type="number" class="form-control" id="maxVisitorCount" min="0" value="@Model.Event.MaxVisitorCount">
                        </div>
                        <div class="form-group my-2">
                            <label for="tags" localize-content>Tags</label>
                            <select id="tags" multiple>
                                @foreach(var tag in Model.Tags){
                                    <option value="@tag" selected="@(Model.Event.Tags.Contains(tag))">@tag</option>
                                }
                            </select>
                            <script>
                                $('#tags').tokenize2();
                            </script>
                        </div>
                    </div>
                </div>
            </div>
            <script>
                var smartwizardConfig = {
                      selected: 0,
                      anchorSettings:{
                          enableAllAnchors: (window.id !== 0)
                      },
                      toolbarSettings: {
                          showNextButton: false,
                          showPreviousButton: false
                      },
                      disabledSteps: [],
                      keyboardSettings: {
                          keyNavigation: false
                      }
                };
                if(window.id !== 0){
                    smartwizardConfig.disabledSteps.push(0);
                    smartwizardConfig.selected = 1;
                }

                $('#smartwizard').smartWizard(smartwizardConfig);

                if(window.id === 0){
                    $("#smartwizard").on("showStep", function() {
                        setTimeout(function() {
                            var stepIndex = $('#smartwizard').smartWizard("getStepIndex");
                            if(stepIndex === 4){
                                 $("#nextButton").hide();
                                 $("#saveButton").show();
                            }
                        }, 450);
                    });
                }
            </script>

            <div class="row my-3" style="display:@(Model.Event.Id == 0 ? "block" : "none");" id="nextButton">
                <div class="col-sm-1">
                    <button type="button" class="btn btn-primary my-2" onclick="$('#smartwizard').smartWizard('next');" localize-content>Next</button>
                </div>
            </div>
            <div style="display:@(Model.Event.Id == 0 ? "none" : "inline");" id="saveButton">
                <div class="row my-3">
                    <div class="col-sm-2">
                        <button type="button" class="btn btn-primary my-2" onclick="save();" localize-content>Save</button>
                    </div>
                    <div class="col-sm-3 mt-3">
                        <input class="form-check-input" type="checkbox" id="enableSaveAsPrivateTemplate" value="1">
                        <label class="form-check-label" for="enableSaveAsPrivateTemplate" localize-content>Save as private template</label>
                    </div>
                    @if (user.Role == UserRole.Admin)
                    {
                        <div class="col-sm-3 mt-3">
                            <input class="form-check-input" type="checkbox" id="enableSaveAsPublicTemplate" value="1">
                            <label class="form-check-label" for="enableSaveAsPublicTemplate" localize-content>Save as public template</label>
                        </div>
                    }
                </div>
            </div>
        </form>
    </div>
</div>